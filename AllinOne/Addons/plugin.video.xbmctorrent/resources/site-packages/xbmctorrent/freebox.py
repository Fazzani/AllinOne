# -*- coding: latin-1 -*-
from __future__ import print_function
import json
import os
from freeboxUtils import *
import xbmc
import collections
from collections import namedtuple
from xbmctorrent import plugin

class Constants(object):
    class FREEBOX(object):
        Session = "session"
        API_VERSION = "api_version"
        Session_token = "session_token"
        track_id = "track_id"
        challenge = "challenge"
        result = "result"
        status = "status"
        password = "password"
        app_token = "app_token"
        success = "success"
        app_id = "app_id"
    class HttpMethods(object):
        GET = 'GET'
        POST = 'POST'
        DELETE = 'DELETE'
        PUT = 'PUT'
    class HEADERS(object):
        X_Fbx_App_Auth = 'X-Fbx-App-Auth'
        JSON_APPLICATION = {"Content-Type":"application/json","charset":"utf-8"}
        form_urlencoded = {"Content-Type":"application/x-www-form-urlencoded","Accept":"text/plain"}
    class RequestsUrls:
        downloads = "{0}/downloads/"
        downloadsTaskInfo = "%s/downloads/%s"
        downloads_files = "%s/downloads/%s/files/%s"
        add_downloads = "{0}/downloads/add"
        downloads_all_files = "{0}/downloads/{1}/files"
        getSession = "{0}/login/session/"
        authorize = "{0}/login/authorize/"
        authorizeTrackId = "{0}/login/authorize/{1}"

class freebox(object):
    """All operations we can do on Feebox with his API 3"""
    def __init__(self, log, freeboxUri, infosApp):
        self.infosApp = infosApp
        self.__log = log
        self.freeboxApiUri = freeboxUri + "/api/v3"
        self.__log('\t freeboxApiUri %s' % self.freeboxApiUri)
        self.__log('\t Init Freebox class')
        self.__app_id = infosApp["app_id"]

    def ping(self):
        #http://mafreebox.freebox.fr/api_version
        res = url_get(str.format("{0}/api_version", self.freeboxApiUri), {}, HEADERS, Constants.HttpMethods.GET)
        self.__log('\t ping Freebox')
        try:
            jsonResult = json.loads(res)
            return jsonResult[Constants.FREEBOX.API_VERSION] != ""
        except Exception as ex:
            self.__log('\t' + repr(ex))
            return False

    def list(self):
        """List Tasks"""
        #listTorrents = requestFreebox(FREEBOX_API +
        #"/downloads/")[CONST_RESULT]
        res = self.__request(str.format(Constants.RequestsUrls.downloads, self.freeboxApiUri))
        jsonData = json.loads(json.dumps(res))
        return jsonData[Constants.FREEBOX.result] if self.__isSuccessRequest(jsonData) else None

    def listFilesOfTask(self, task_id):
        """List Files of Task"""
        #listTorrents = requestFreebox(FREEBOX_API +
        #"/downloads/")[CONST_RESULT]
        res = self.__request(str.format(Constants.RequestsUrls.downloads_all_files, self.freeboxApiUri, str(task_id)))
        jsonData = json.loads(json.dumps(res))
        return jsonData[Constants.FREEBOX.result] if self.__isSuccessRequest(jsonData) else None
        
    def addTask(self, uri):
        """ Add new Task with uri"""
        return self.__request(str.format(Constants.RequestsUrls.add_downloads, self.freeboxApiUri), dict(download_url = uri), Constants.HttpMethods.POST, Constants.HEADERS.form_urlencoded,True)

    def deleteTask(self, id, erase=True):
        """Delete Task with Id"""
        self.__log('Deleting item %s' % str(id))
        uri = Constants.RequestsUrls.downloadsTaskInfo % (self.freeboxApiUri, str(id))
        if erase:
            uri+="/erase"
        res = self.__request(uri, headers=Constants.HEADERS.JSON_APPLICATION, method=Constants.HttpMethods.DELETE)
        jsonData = json.loads(json.dumps(res))
        return self.__isSuccessRequest(jsonData)

    def updateTask(self, id, data):
        """Update Task with new Data"""
        uri = Constants.RequestsUrls.downloadsTaskInfo % (self.freeboxApiUri, str(id))
        res = self.__request(uri,data, method = Constants.HttpMethods.PUT, headers  = Constants.HEADERS.JSON_APPLICATION)
        self.__log('Updating item %s' % str(id))
        jsonData = json.loads(json.dumps(res))
        return self.__isSuccessRequest(jsonData)

    def isTaskExistByName(self, taskName):
        ''' Is task name Exist return his id else nothing'''
        res = self.list()
        for task in res:
            self.__log('TaskName : ' + task['name'])
            if task['name'].lower() in taskName.lower():
                self.__log('Task exist id = %s',task['id'])
                return task['id']
        return ""

    def findTaskByName(self, taskName):
        ''' Is task name Exist return his id else nothing'''
        self.__log('\tSearching task by name for %s' % taskName)
        res = self.list()
        for task in res:
            self.__log('\t\tTaskName : ' + task['name'])
            if taskName in task['name'] :
                self.__log('\t\t\tTask exist id = %s',task['id'])
                return task
        return None

    def findTaskById(self, taskId):
        ''' Is task name Exist return his id else nothing'''
        self.__log('\tSearching task by Id for %s' % taskId)
        res = self.list()
        for task in res:
            self.__log('\t\task id : %i' % task['id'])
            if taskId == task['id'] :
                self.__log('\t\t\tTask exist id = %i' % taskId)
                return task
        return None

    def updateFileTask(self, idTask, idFile, data):
        """Update file of Task"""
        uri = Constants.RequestsUrls.downloads_files % (self.freeboxApiUri, str(idTask), str(idFile))
        res = self.__request(uri, data, Constants.HttpMethods.PUT)
        jsonData = json.loads(json.dumps(res))
        self.__log(repr(res))
        self.__log('Updating task %s id file %s' % (str(idTask), str(idFile)))
        return self.__isSuccessRequest(jsonData)
    
    def __request(self, path, params={}, method=Constants.HttpMethods.GET, headers={}, isEncodedForm=False):
        authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
        #self.__log('authStorage.keys() : -----------' + repr(authStorage.keys()))
        #self.__log('authStorage.values() : -----------' + str(authStorage.values))
        self.__log('uri : ----------- : ' + path)
        if Constants.FREEBOX.Session not in authStorage.keys():
            if openSession():
                return self._request(path, params, method, headers)
            else:
                plugin.notify('Failed to open session')

        self.__log('session_token : ----------- ' + str(authStorage.get(Constants.FREEBOX.Session)[Constants.FREEBOX.Session_token]))
        HEADERS[Constants.HEADERS.X_Fbx_App_Auth] = str(authStorage.get(Constants.FREEBOX.Session)[Constants.FREEBOX.Session_token])
        for key,value in headers.items(): 
            HEADERS[key] = value
        if isEncodedForm:
            res = url_get_param_string(path, params, HEADERS, method=method)
        else:
            res = url_get(path, params, HEADERS, method)
        self.__log('Request res : ' + repr(res))
        if res is None or res == '':
           if self.openSession():
                self.__request(path, params, method, headers, isEncodedForm)
           else:
                plugin.notify('Failed to open session')
                self.__log('Failed to open session')
        return json.loads(res)

    def openSession(self):
        authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
        if Constants.FREEBOX.track_id not in authStorage:
            self.__log('\t\t Getting authorize...')
            self.authorize()
        self.__log('openSession________________track_id : ' + str(authStorage[Constants.FREEBOX.track_id]))
        res = json.loads(url_get(str.format(Constants.RequestsUrls.authorizeTrackId, self.freeboxApiUri, str(authStorage[Constants.FREEBOX.track_id]))))
        self.__log('openSession ________________' + repr(res))
        if res[Constants.FREEBOX.result][Constants.FREEBOX.status] == 'granted' or res[Constants.FREEBOX.result][Constants.FREEBOX.status] == 'timeout':
           self.__log('open Session_______________' + res[Constants.FREEBOX.result][Constants.FREEBOX.status])
           authStorage[Constants.FREEBOX.challenge] = res[Constants.FREEBOX.result][Constants.FREEBOX.challenge]
           authStorage[Constants.FREEBOX.password] = self.getPassword(authStorage[Constants.FREEBOX.app_token], authStorage[Constants.FREEBOX.challenge])
           authStorage.update({Constants.FREEBOX.Session: self.getSession(authStorage[Constants.FREEBOX.password])})
           authStorage.sync()
           xbmc.sleep(1000)
           return True
        return False

    def getSession(self, password):
        #POST /api/v3/login/session/
        res = json.loads(url_get(str.format(Constants.RequestsUrls.getSession,self.freeboxApiUri), params={Constants.FREEBOX.app_id :self.__app_id,Constants.FREEBOX.password:password}, method = "POST"))
        if res[Constants.FREEBOX.result]:
            return res[Constants.FREEBOX.result]
        raise Exception('Getting token session failed')
    
    def getPassword(self, app_token,challenge):
        from hashlib import sha1
        import hmac
        return hmac.new(app_token.replace('\\','').encode(), challenge.replace('\\',''), sha1).hexdigest()
    
    def authorize(self):
        app_token, track_id = self.__getAppToken()
        self.__log('auth success : app_token : ' + app_token)
        authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
        authStorage.update({Constants.FREEBOX.app_token: app_token})
        authStorage.update({Constants.FREEBOX.track_id: track_id})
        authStorage.sync()
        xbmc.sleep(2000)

        while 1 == 1:
           if not openSession():
                break
           self.__log('authorize________________ Waiting to open session')
           xbmc.sleep(2000)

    def __getAppToken(self):
        url = str.format(Constants.RequestsUrls.authorize, self.freeboxApiUri)
        res = url_get(url, params = self.infosApp, method=Constants.HttpMethods.POST)
        auth = json.loads(res)
        self.__log('auth ____________' + repr(auth))
        if auth[Constants.FREEBOX.success]:
            self.__log('auth success : ' + auth[Constants.FREEBOX.result][Constants.FREEBOX.app_token])
            return auth[Constants.FREEBOX.result][Constants.FREEBOX.app_token], auth[Constants.FREEBOX.result][Constants.FREEBOX.track_id]
        self.__log('Auth failed')
        raise BaseException("Get App Token Failed")

    def __isSuccessRequest(self, jsonData):
        try:
            return Constants.FREEBOX.success in jsonData and jsonData[Constants.FREEBOX.success] == True
        except:
            return False



