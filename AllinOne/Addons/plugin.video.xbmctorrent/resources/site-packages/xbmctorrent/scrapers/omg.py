import os
import re
import xbmc
from xbmctorrent import plugin
from xbmctorrent.scrapers import scraper
from xbmctorrent.ga import tracked
from xbmctorrent.caching import cached_route
from xbmctorrent.utils import ensure_fanart
from xbmctorrent.library import library_context
from xbmcswift2.logger import log
import xbmcplugin
import sys
from itertools import izip

BASE_URL = plugin.get_setting("base_omg")
HEADERS = {
    "Referer": BASE_URL,
    "User-Agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36",
    "Cookie":"ot_affiche=value"
}

SORT_DATE = "trie-date"
SORT_NOM = "trie-nom"
SORT_TELECHARGEMENT = "trie-telechargement"
SORT_SEEDS = "trie-seeds"
SORT_LEECHS = "trie-leechs"
SORT_CATEGORIE = "trie-categorie"

SORT_DIRECTION_ASC = "asc"
SORT_DIRECTION_DESC = "desc"

ACTION_SEARCH = "recherche"
ACTION_FILMS = "films"
ACTION_SERIES = "series-episodes"
QUERY_CATEGORIE = "QUERY_CATEGORIE"
TYPE_F = "films"
TYPE_S = "series"
TYPE_A = "All"

@scraper("OmgTorrent - Torrent Francais", "%s/img/logo.png" % BASE_URL)
@plugin.route("/omg")
@ensure_fanart
@tracked
def omg_index():
    return [{"label": "Recherche ...", "path": plugin.url_for("omg_search")},
		{"label": "Films", "path": plugin.url_for("omg_listAll", cat=TYPE_F, page=1)},
		{"label": "    Categories ...", "path": plugin.url_for("omg_movie_index")},
		{"label": "Series", "path": plugin.url_for("omg_listAll", cat=ACTION_SERIES, page=1)},
		{"label": "    Categories ...", "path": plugin.url_for("omg_serie_index")},
		{"label": "TOP 30", "path": plugin.url_for("omg_top", type = TYPE_A)},
		{"label": "    Films DVDRip", "path": plugin.url_for("omg_top", type="3")},
		{"label": "    Films 720p", "path": plugin.url_for("omg_top", type="6")},
		{"label": "    Films 1080p", "path": plugin.url_for("omg_top", type="5")},
        {"label": "    Films 3D", "path": plugin.url_for("omg_top", type="11")},
		{"label": "Derniers", "path": plugin.url_for("omg_last", type=TYPE_A)},
		{"label": "    Series", "path": plugin.url_for("omg_last", type=TYPE_S)},
		{"label": "    Films", "path": plugin.url_for("omg_last", type=TYPE_F)},
		{"label": "    Films 720p", "path": plugin.url_for("omg_last", type="720p")},
		{"label": "    Films 1080p", "path": plugin.url_for("omg_last", type="1080p")}]

@plugin.route("/omg/<action>/<query>/<genre>/<sort>/<page>")
@library_context
@ensure_fanart
@tracked
def omg_page(action, query, genre, sort, page):
    from xbmctorrent.utils import url_get
    from bs4 import BeautifulSoup
    #http://www.omgtorrent.com/recherche/?order=seeders&orderby=desc&query=Red&affiche=max
    url_adr = "%s/%s/" % (BASE_URL, action)
    if query != QUERY_CATEGORIE:
        url_adr = url_adr + "?order=id&orderby=%s&query=%s&page=%s" % ('desc',query,str(page))
    else:
        #http://www.omgtorrent.com/films/genre/animation/?order=id&orderby=desc#nav
        url_adr = url_adr + "genre/%s/?order=id&orderby=%s&query=%s&page=%s" % (genre,'desc',query,str(page))
    #xbmcplugin.setContent(int(sys.argv[1]),'movies' if action==ACTION_FILMS
    #else 'tvshows')
    html_data = url_get(url_adr, headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    if genre != ACTION_SEARCH:
        name_nodes = soup.findAll('div', 'torrents_conteneur')
        for node in name_nodes:
            yield getMediaMosaique(node)
    else:
        name_nodes = soup.find('table', 'table_corps').findAll('tr')
        for node in name_nodes:
            media = getMediaRow(node,metaDataEnabled = False)
            if media is not None:
                yield media
    yield {
        "label": ">> Next page",
        "path": plugin.url_for("omg_page", action=action, query=query,genre=genre, sort=sort, page=int(page) + 1),
        "is_playable": False,
    }

def getMediaRow(node, mediaType=TYPE_F, metaDataEnabled=True):
    from xbmctorrent.tmdb import searchTv
    from xbmctorrent.tmdb import search
    from xbmctorrent.tmdb import get_list_item
    from xbmctorrent.tmdb import getById
    from xbmctorrent.utils import get_show_info_from_name
    tmdbInfos = None
    tmdbMovieInfo = None
    tds = node.findAll('td')
    if len(tds) > 0 :
      title = tds[1].a.text.encode("utf-8")
      if metaDataEnabled:
        if mediaType == TYPE_F:
            tmdbInfos = search(query=title,language = "fr",page=1)
            type = 'movie'
        else:
            type = 'tv'
            tvName = title
            tvNameObject = get_show_info_from_name(tvName)
            if tvNameObject:
                tvName = tvNameObject["show"]
                tmdbInfos = searchTv(query=tvName,language = "fr",page=1)
      if tmdbInfos is not None and len(tmdbInfos) > 0 and tmdbInfos['total_results'] > 0:
         tmdbMovieInfo = get_list_item(getById(tmdbInfos['results'][0]["id"],type))
      seed = tds[4].text.replace(',','')
      leech = tds[3].text.replace(',','')
      color = getColor(seed, leech)
      title = title + " [COLOR %s][S:%s|L:%s][/COLOR]" % (color.encode("utf-8"), seed.encode("utf-8"), leech.encode("utf-8"))
      uri_addr = getUrlMedia(tds[1].a["href"])
      img_addr = ''
      if metaDataEnabled and tmdbMovieInfo is not None:
        tmdbMovieInfo["path"] = plugin.url_for("play", uri=uri_addr)
        tmdbMovieInfo["label"] = title
        return tmdbMovieInfo
      else:
        return {
          "label": title,
          "path": plugin.url_for("play", uri=uri_addr),
          "is_playable": True,
          "thumbnail" : img_addr , 
          "properties": {
            "fanart_image" : img_addr
           }
       }

def getMediaMosaique(name_node):
    from xbmctorrent.tmdb import search
    from xbmctorrent.tmdb import get_list_item
    from xbmctorrent.tmdb import getById
    title = name_node.find("a").img["alt"].encode("utf-8")
    year = name_node.find('div','torrents_annee_de_production').text
    tmdbInfos = search(query=title,language = "fr",year = year,page=1)
    if tmdbInfos and len(tmdbInfos) > 0 and tmdbInfos['total_results'] > 0:
        idmovie = getById(tmdbInfos['results'][0]["id"])
        tmdbMovieInfo = get_list_item(idmovie)
    seed = name_node.find('span','sources').text
    leech = name_node.find('span','clients').text
    color = getColor(seed, leech)
    title = "%s [COLOR %s][S:%s|L:%s][/COLOR]" % (title, color.encode("utf-8"), seed.encode("utf-8"), leech.encode("utf-8"))
    uri_addr = getUrlMedia(name_node.find("a")["href"])
    img_addr = BASE_URL + name_node.find("a").img['src']
    if tmdbInfos and len(tmdbInfos) > 0 and tmdbInfos['total_results'] > 0:
        tmdbMovieInfo["path"] = plugin.url_for("play", uri=uri_addr)
        tmdbMovieInfo["label"] = title
        return tmdbMovieInfo
    else:
       return {
        "label": title,
        "path": plugin.url_for("play", uri=uri_addr),
        "is_playable": True,
        "thumbnail" : img_addr , 
        "properties": {
          "fanart_image" : img_addr
        } ,
        "info": {
          'genre': name_node.find('div','torrents_genre').a.text,
          'year': year
        }
    }

@plugin.route("/omg/top/<type>")
@library_context
@ensure_fanart
@tracked
def omg_top(type):
    from bs4 import BeautifulSoup
    from xbmctorrent.utils import url_get
    from xbmctorrent.tmdb import search
    from xbmctorrent.tmdb import get_list_item
    from xbmctorrent.tmdb import getById
    url_adr = "%s/films/?order=top" % BASE_URL
    if type != TYPE_A and len(type) > 0:
        url_adr = "%s/films/?order=id&orderby=desc" % BASE_URL
        #order:top orderby:asc id_cat[]:3 id_cat[]:6
        params = {'order' : 'id',
          'orderby' : 'desc',
          'id_cat[]' : type }
        html_data = url_get(url_adr, params, headers=HEADERS)
    else:
        html_data = url_get(url_adr, headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    name_nodes = soup.findAll('div', 'torrents_conteneur')
    for node in name_nodes:
        yield getMediaMosaique(node)

@plugin.route("/omg/last/<type>")
@library_context
@ensure_fanart
@tracked
def omg_last(type):
    from bs4 import BeautifulSoup
    from xbmctorrent.utils import url_get

    url_adr = "%s/derniers-torrents.php" % BASE_URL
    if type != TYPE_A:
        url_adr = url_adr + "?filtre=%s" % type
    html_data = url_get(url_adr)

    soup = BeautifulSoup(html_data, "html5lib")
    name_nodes = soup.findAll('div', re.compile('ligne[0,1]'))

    for name_node in name_nodes:
        title = name_node.find("a").text.encode("utf-8")
        tds = name_node.parent.findAll("td")
        seed = name_node.find("div","up").text
        leech = name_node.find("div","down").text
        color = getColor(seed, leech)
        title = title + " [COLOR %s][S:%s|L:%s][/COLOR]" % (color.encode("utf-8"), seed.encode("utf-8"), leech.encode("utf-8"))
        html_uri = name_node.find("a")["href"]
        print '_________________________________'
        print html_uri
        torrent_basename = os.path.basename(html_uri)
        print torrent_basename
        uri_addr = BASE_URL + "/telechargement/" + torrent_basename.replace(".html",".torrent")
        print uri_addr
        img_addr = BASE_URL + "/_pictures/" + torrent_basename.replace(".html",".jpg")
        yield {
            "label": title,
            "path": plugin.url_for("play", uri=uri_addr),
            "is_playable": True,
            "thumbnail" : img_addr , 
            "properties": {
              "fanart_image" : img_addr , 
            } ,
        }

@plugin.route("/omg/movie/index")
@ensure_fanart
@tracked
def omg_movie_index():
	return [{"label": "Action", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="action", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Arts Martiaux", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="arts-martiaux", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Thriller", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="thriller", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Policier", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="policier", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Epouvante-horreur", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="epouvante-horreur", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Science fiction", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="science fiction", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Aventure", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE, genre="aventure", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Comedie", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="comedie", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Fantastique", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="fantastique", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Animation", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="animation", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Espionnage", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="espionnage", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Comedie dramatique".encode("utf-8"), "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="comedie-dramatique", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Biopic", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="Biopic", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Comedie musicale", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="comedie-musicale", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Documentaire", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="documentaire", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Drames", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE, genre="drames", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Famille", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="famille", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Guerre", "path": plugin.url_for("omg_page", action=ACTION_FILMS, query=QUERY_CATEGORIE,genre="guerre", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Historique", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="historique", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Peplum", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="peplum", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Romance", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="romance", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Spectacle", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="spectacle", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Western", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="western", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "Musical", "path": plugin.url_for("omg_page", action=ACTION_FILMS,query=QUERY_CATEGORIE, genre="musical", sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},]

@plugin.route("/omg/serie/index")
@ensure_fanart
@tracked
def omg_serie_index():
	return [{"label": "0, A, B", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="0-a-b",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "C, D, E", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="c-d-e",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "F, G, H", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="f-g-h",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "I, J, K", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="i-j-k",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "L, M, N", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="l-m-n",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "O, P, Q", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="o-p-q",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "R, S, T", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="r-s-t",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "U, V, W", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="u-v-w",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},
		{"label": "X, Y, Z", "path": plugin.url_for("omg_page", action=ACTION_SERIES, query="x-y-z",genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=0)},]

@plugin.route("/omg/all/<cat>/<page>")
@ensure_fanart
@library_context
@tracked
def omg_listAll(cat, page):
    from bs4 import BeautifulSoup
    from xbmctorrent.utils import url_get
    from xbmctorrent.tmdb import search
    from xbmctorrent.tmdb import get_list_item
    from xbmctorrent.tmdb import getById
    from xbmctorrent.utils import url_get
    url_adr = "%s/%s/?order=id&orderby=desc&page=%s" % (BASE_URL,cat,page)
    html_data = url_get(url_adr, headers=HEADERS)
    soup = BeautifulSoup(html_data, "html5lib")
    if ACTION_SERIES == cat :
        name_nodes = soup.find('table', 'table_corps').findAll('tr')
    else:
        name_nodes = soup.findAll('div', 'torrents_conteneur')

    for name_node in name_nodes:
        if ACTION_SERIES == cat :
            media = getMediaRow(name_node,cat)
            if media is not None:
                yield media
        else:
            yield getMediaMosaique(name_node)

    yield {
        "label": ">> Next page",
        "path": plugin.url_for("omg_listAll", cat=cat, page=int(page) + 1),
        "is_playable": False,
    }

def getColor(seed, leech):
	iSeed = int(seed)
	iLeech = int(leech)
	color = ""
	
	# Base sur l'algo de PopcornTime :
	# https://github.com/popcorn-official/popcorn-app/commit/1eceaf510da6bad6b51803c7dcc7868ad096a0af
	# First calculate the Seed/Leech ratio
	if iLeech > 0:
		ratio = iSeed / iLeech
	else:
		ratio = iSeed
	# Normalize the data.  Convert each to a percentage
	# Ratio: Anything above a ratio of 5 is good
	normalizedRatio = min(ratio / 5 * 100, 100)
	# Seeds: Anything above 30 seeds is good
	normalizedSeeds = min(iSeed / 30 * 100, 100)
	# Weight the above metrics differently
	# Ratio is weighted 60% whilst seeders is 40%
	weightedRatio = normalizedRatio * 0.6
	weightedSeeds = normalizedSeeds * 0.4
	weightedTotal = weightedRatio + weightedSeeds
	# Scale from [0, 100] to [0, 3].  Drops the decimal places
	scaledTotal = round((weightedTotal * 3) / 100)
	
	if scaledTotal < 1:
		color = "red"
	elif scaledTotal < 2:
		color = "orange"
	else:
		color = "green"
	return color
	
@plugin.route("/omg/search")
@tracked
def omg_search():
    query = plugin.request.args_dict.pop("query", None)
    if not query:
        query = plugin.keyboard("", "XBMCtorrent - OmgTorrent - Recherche")
    if query:
        plugin.redirect(plugin.url_for("omg_page", action=ACTION_SEARCH, query=query,genre=ACTION_SEARCH, sort=SORT_DATE + SORT_DIRECTION_DESC, page=1, **plugin.request.args_dict))

def getUrlMedia(medialink):
    #return 'http://www.omgtorrent.com/torrent/magnet:?xt=urn:btih:9FA57AB755575A789EDF284C82C908EB17D3C3A8&dn=The+Skeleton+Twins+2014+FRENCH+BDRip+x264-PRiDEHD&tr=http://cpleft.com:2710/announce&tr=http://exodus.desync.com/announce&tr=http://announce.torrentsmd.com:6969/announce&tr=http://tracker.ex.ua/announce&tr=http://tracker.torrentbay.to:6969/announce&tr=udp://12.rarbg.me:80/announce&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://exodus.desync.com:6969/announce&tr=udp://ipv4.tracker.harry.lu:80/announce&tr=udp://open.demonii.com:1337/announce&tr=udp://tracker.btzoo.eu:80/announce&tr=udp://tracker.publichd.eu:80/announce&tr=udp://tracker.1337x.org:80/announce&tr=udp://tracker.istole.it:80/announce&tr=udp://tracker.openbittorrent.com:80/announce&tr=udp://tracker.publicbt.com:80/announce&tr=udp://tracker.secureboxes.net:80/announce'
    match = re.match(r'(.+?)_([0-9]+?).html', medialink)
    if match :
       return BASE_URL + "/clic_dl.php?id=%s" % match.group(2)
    return ''
