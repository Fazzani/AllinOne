import xbmc
import xbmcgui
import urllib
import os
import time
import urlparse
from xbmctorrent import plugin
from xbmctorrent.common import RESOURCES_PATH
from xbmctorrent.platform import PLATFORM
from xbmctorrent.ga import track_event
from xbmctorrent.utils import url_get_json
from contextlib import contextmanager, closing, nested


TORRENT2HTTP_POLL = 3000
PLAYING_EVENT_INTERVAL = 60

WINDOW_FULLSCREEN_VIDEO = 12005

XBFONT_LEFT = 0x00000000
XBFONT_RIGHT = 0x00000001
XBFONT_CENTER_X = 0x00000002
XBFONT_CENTER_Y = 0x00000004
XBFONT_TRUNCATED = 0x00000008
XBFONT_JUSTIFY = 0x00000010

VIEWPORT_WIDTH = 1920.0
VIEWPORT_HEIGHT = 1088.0
OVERLAY_WIDTH = int(VIEWPORT_WIDTH * 0.7) # 70% size
OVERLAY_HEIGHT = 200

ENCRYPTION_SETTINGS = {
    "Forced": 0,
    "Enabled": 1,
    "Disabled": 2,
}


class OverlayText(object):
    def __init__(self, w, h, item, *args, **kwargs):
        plugin.log.debug('OverlayText init %s %s ' % (repr(item.has_key('thumbnail')),repr(item)))
        self.percent = 0
        self.window = xbmcgui.Window(WINDOW_FULLSCREEN_VIDEO)
        viewport_w, viewport_h = self._get_skin_resolution()
        # Adjust size based on viewport, we are using 1080p coordinates
        w = int(w * viewport_w / VIEWPORT_WIDTH)
        h = int(h * viewport_h / VIEWPORT_HEIGHT)
        x = (viewport_w - w) / 2
        y = (viewport_h - h) / 2
        self._shown = False
        self._text = ""
        self._label = xbmcgui.ControlLabel(x, y, w, h, self._text, *args, **kwargs)
        if item.has_key('thumbnail'):
            img_bckg = item['thumbnail']
        else:
            img_bckg = os.path.join(RESOURCES_PATH, "xbmctorrent","resources","skins","Default","media", "black.png")
        self._background = xbmcgui.ControlImage(x, y, w, h, img_bckg)
        self._background.setColorDiffuse("0xC0FF0000")
        self._pb = xbmcgui.ControlProgress(x, (y + h) - 11, w, 10)
        self._pb.setPercent(0)

    def show(self):
        plugin.log.debug('\t\t Show OverLay')
        if not self._shown:
            plugin.log.debug('percent pb : %f' % self.percent)
            self.window.addControls([self._background, self._label, self._pb])
            animations = [('conditional', 'effect=fade start=0 end=90 time=250 delay=125 condition=true',), ('conditional', 'effect=slide start=0,400 end=0,0 time=250 condition=true',)]
            self._background.setAnimations(animations)
            self._pb.setAnimations(animations)
            self._label.setAnimations(animations)
            self._pb.setPercent(self.percent)
            self._shown = True

    def hide(self):
        if self._shown:
            self._shown = False
            self.window.removeControls([self._background, self._label, self._pb])


    def close(self):
        plugin.log.debug('\t\t Close OverLay')
        self.hide()

    @property
    def text(self):
        return self._text

    @text.setter
    def text(self, text):
        self._text = text
        if self._shown:
            self._label.setLabel(self._text)

    # This is so hackish it hurts.
    def _get_skin_resolution(self):
        import xml.etree.ElementTree as ET
        skin_path = xbmc.translatePath("special://skin/")
        tree = ET.parse(os.path.join(skin_path, "addon.xml"))
        res = tree.findall("./extension/res")[0]
        return int(res.attrib["width"]), int(res.attrib["height"])

class CustomPlayer(xbmc.Player):
    
    def __init__(self, *args, **kwargs):
        xbmc.Player.__init__(self)
        self.display_name = ""
        self.item = kwargs.get('item')
        self.taskid = kwargs.get('taskid')
        self.fb = kwargs.get('fb')
        self.on_playback_started = []
        self.on_playback_resumed = []
        self.on_playback_paused = []
        self.on_playback_stopped = []
        plugin.log.debug("Now playing torrent...")
        self.last_playing_event = 0
        self.overlayText = OverlayText(w = OVERLAY_WIDTH, h = OVERLAY_HEIGHT, alignment = XBFONT_CENTER_X | XBFONT_CENTER_Y, item = self.item)

    def onPlayBackStarted(self):
        plugin.log.debug('onPlayBackStarted______________')
        self.showOverlay()
        for f in self.on_playback_started:
            f()
        track_event("video", "play", self.display_name)

    def onPlayBackResumed(self):
        for f in self.on_playback_resumed:
            f()
        self.onPlayBackStarted()

    def onPlayBackPaused(self):
        plugin.log.debug('\t\t Pause Event triggered')
        for f in self.on_playback_paused:
            f()
        track_event("video", "pause", self.display_name)

    def onPlayBackStopped(self):
        for f in self.on_playback_stopped:
            f()
        track_event("video", "stop", self.display_name)

    def _get_status_lines(self, status):
        plugin.log.debug('\t\t _get_status_lines')
        return [status["name"],
            "%.2f%% %s" % (status["progress"], status["state"]),
            "D:%(download_rate).2fkb/s U:%(upload_rate).2fkb/s" % status]

    def showOverlay(self):
        plugin.log.debug('\t\t _showOverlay')
        with closing(self.overlayText) as overlay:
            with nested(self.attach(overlay.show, self.on_playback_paused),
                        self.attach(overlay.hide, self.on_playback_resumed, self.on_playback_stopped)):
                plugin.log.debug('\t\t _showOverlay in 1 %s' % repr(self.isPlaying()))
                while self.isPlaying():
                    plugin.log.debug('\t\t _showOverlay in 2')
                    data = self.getInfoOverlay()
                    plugin.log.debug('\t\t _showOverlay data : %s' % repr(data))

                    overlay.text = "\n".join(self._get_status_lines(data))
                    plugin.log.debug('progress percent %s' % str(data['progress']))
                    #overlay.percent = float(data['progress'])
                    now = time.time()
                    if (now - self.last_playing_event) > PLAYING_EVENT_INTERVAL:
                        track_event("video", "playing", self.display_name)
                        self.last_playing_event = now
                    plugin.log.debug('end looooooooooooop %s' % repr(overlay))
                    xbmc.sleep(TORRENT2HTTP_POLL)

    def getInfoOverlay(self):
      if self.taskid is None:
        return { 'name':self.item['label'], 'progress':100, 'state' : 'done', 'download_rate':0, 'upload_rate':0}
      plugin.log.debug('_____________task : ')
      task = self.fb.findTaskById(self.taskid)
      plugin.log.debug('_____________task : %s' % repr(task))
      return { 'name':self.item['label'], 'progress':task['rx_pct']/100, 'state' : task['status'], 'download_rate':task['rx_rate'], 'upload_rate':task['tx_rate']}

    @contextmanager
    def attach(self, callback, *events):
        for event in events:
            event.append(callback)
        yield
        for event in events:
            event.remove(callback)

  
