# -*- coding: latin-1 -*-
from __future__ import print_function
import unittest
from freebox import freebox
from freebox import Constants

class Test_testFreebox(unittest.TestCase):
    
    # Cette méthode sera appelée avant chaque test.
    def setUp(self):
        #params = {"app_id": APP_ID, "app_name": 'freeboxtorrent',
        #"app_version": plugin.addon.getAddonInfo('version'),"device_name":
        #DEVICE_NAME }
        APP_ID = "plugin.video.freeboxtorrent"
        DEVICE_NAME = "XBMC"
        self.infosApp = {"app_id": APP_ID, "app_name": 'freeboxtorrent', "app_version": "0.6.4.019","device_name": DEVICE_NAME }
        self.url_api = 'http://mafreebox.freebox.fr/api/v3'
        self.freebox = freebox(print,self.url_api, self.infosApp)

    # Cette méthode sera appelée après chaque test.
    def tearDown(self):
        del self.freebox
        print('Nettoyage !')

    def test_Ping(self):
        self.assertTrue(self.freebox.ping())

    def test_openSession(self):
        self.assertTrue(self.freebox.openSession())

    def test_list(self):
        listTasks = self.freebox.list()
        self.assertIsNotNone(listTasks)

    def test_isTaskExistByName(self):
        taskName = '24.S01.FRENCH.DVDRiP.XviD-FiG0LU.avi'
        id = self.freebox.isTaskExistByName(taskName)
        self.assertGreater(len(str(id)), 0, 'Task %s' % taskName)

    def test_listFilesOfTask(self):
        listFiles = self.freebox.listFilesOfTask(718)
        self.assertIsNotNone(listFiles)

    def test_addTask(self):
        ''' Test Add new Task, update and Delete it'''
        uri = 'http://www.omgtorrent.com/clic_dl.php?id=22504'
        res = self.freebox.addTask(uri)
        self.assertTrue(Constants.FREEBOX.result in res, "Failed to add Task")
        resTask = res[Constants.FREEBOX.result]
        self.assertTrue('id' in resTask,"Task not added")
        idTask = int(resTask['id'])
        print(str.format("idTask : {0}", idTask))
        self.assertTrue(self.freebox.updateTask(idTask, {"io_priority":"low","status":"stopped"}),"Task not updated")
        self.assertTrue(self.freebox.deleteTask(idTask), "Task not deleted")

    def test_decode(self):
        import base64
        chaine64 = "L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMvVHJ1YW5kcy5GUkVOQ0guRFZEU0NSLlhWaUQtaU5ELw=="
        chaine64 = "L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMv"
        chaine = base64.decodestring(chaine64)
        print(chaine)
        self.assertEqual(u"/TOSHIBA EXT/vidéos/Films/", chaine)
    def test_biggestDictValue(self):
        import json
        chaine =[{"rx_bytes":461580000,"tx_bytes":907830,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMv","archive_password":"","eta":199,"status":"downloading","io_priority":"high","type":"bt","queue_pos":1,"id":805,"created_ts":1423679176,"stop_ratio":150,"tx_rate":2050,"name":"La.Colline.A.Des.Yeux.FRENCH.DVDRiP.DivX","tx_pct":8,"rx_pct":5728,"rx_rate":1570000,"error":"none","size":733720000},{"rx_bytes":724500000,"tx_bytes":1080000000,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMvVHJ1YW5kcy5GUkVOQ0guRFZEU0NSLlhWaUQtaU5ELw==","archive_password":"","eta":0,"status":"done","io_priority":"high","type":"bt","queue_pos":2,"id":797,"created_ts":1423594724,"stop_ratio":150,"tx_rate":0,"name":"Truands.FRENCH.DVDSCR.XViD-iND","tx_pct":10000,"rx_pct":10000,"rx_rate":0,"error":"none","size":724500000},{"rx_bytes":735860000,"tx_bytes":1100000000,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMv","archive_password":"","eta":0,"status":"done","io_priority":"high","type":"bt","queue_pos":3,"id":728,"created_ts":1423089822,"stop_ratio":150,"tx_rate":0,"name":"[ www.OMGTORRENT.com ] Before.I.Go.To.Sleep.2014.TRUEFRENCH.DVDRip.XviD-LYS.avi","tx_pct":10004,"rx_pct":10000,"rx_rate":0,"error":"none","size":735860000},{"rx_bytes":625210000,"tx_bytes":938270000,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMv","archive_password":"","eta":0,"status":"done","io_priority":"high","type":"bt","queue_pos":4,"id":777,"created_ts":1423406475,"stop_ratio":150,"tx_rate":0,"name":"A L\'INTERIEUR -DVDRIP -FRENCH.avi","tx_pct":10004,"rx_pct":10000,"rx_rate":0,"error":"none","size":625210000},{"rx_bytes":366070000,"tx_bytes":565170000,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMvMjQuUzAxLkZSRU5DSC5EVkRSaVAuWHZpRC1GaUcwTFUv","archive_password":"","eta":0,"status":"done","io_priority":"high","type":"bt","queue_pos":5,"id":790,"created_ts":1423513643,"stop_ratio":150,"tx_rate":0,"name":"24.S01.FRENCH.DVDRiP.XviD-FiG0LU","tx_pct":10292,"rx_pct":10000,"rx_rate":0,"error":"none","size":366070000},{"rx_bytes":734450000,"tx_bytes":1100000000,"download_dir":"L1RPU0hJQkEgRVhUL3ZpZMOpb3MvRmlsbXMv","archive_password":"","eta":0,"status":"done","io_priority":"high","type":"bt","queue_pos":6,"id":771,"created_ts":1423403851,"stop_ratio":150,"tx_rate":0,"name":"aymo-xvid-cell.avi","tx_pct":10008,"rx_pct":10000,"rx_rate":0,"error":"none","size":734450000}]
        listFiles = json.loads(json.dumps(chaine))
        biggest = max(listFiles, key=lambda x:x['size'])
        print(biggest)
        assertEqual(biggest['size'],735860000)
if __name__ == '__main__':
    unittest.main()
