# -*- coding: latin-1 -*-
from freeboxUtils import *
import xbmc
import json
import sys
import os
from xbmctorrent import plugin
from xbmctorrent.common import SCRAPER_SERVER_URL
from freebox import freebox
import base64
import xbmcswift2
from CustomPlayer import CustomPlayer
#from mockxbmc import xbmcgui
infosApp = {"app_id": APP_ID, "app_name": 'freeboxtorrent', "app_version": "0.6.4.019","device_name": DEVICE_NAME }
if xbmcswift2.CLI_MODE:
    interval = 10000
    freebox_url = ""
else:
    interval = plugin.get_setting('interval_check_playable_media') * 1000
    freebox_url = plugin.get_setting('freebox_url')

interval = 10000

fb = freebox(plugin.log.debug, freebox_url, infosApp)

@plugin.route("/freebox/ping")
def freebox_ping():
    plugin.notify("Succuss" if fb.ping() else "Failed","Test ping to Freebox")

@plugin.route("/freebox/movies")
def freebox_torrents():
    tasks = fb.list()
    plugin.log.debug(repr(tasks))
    for torrent in tasks:
        
       file = fb.listFilesOfTask(torrent["id"])
       if ('video' or 'stream') in file[0]['mimetype']:
           path = toValidXbmcPath(torrent['download_dir'],file[0]['filepath'])
           yield{
                "label": torrent["name"],
                "path": path,
                "is_playable": True
            }

#POST /api/v3/downloads/add
@plugin.route("/freebox/downloads/addUrl/<uri>/<isSaison>")
def freebox_addByUrl(uri, isSaison):
    from library import library_isExistingItem
    plugin.log.debug("Is saison uri : " + str(isSaison))
    item = compelteInfoItem(uri)
    isSaison = True if int(isSaison) == 1 else False
    plugin.log.debug("Is saison uri : " + str(isSaison))
    pathExistingItem = library_isExistingItem(item, isSaison=isSaison)
    key = 'torrentName' if isSaison else 'torrentFileName'

    if len(pathExistingItem) > 0:
        plugin.log.debug("Item exist in library. Path : %s" % pathExistingItem)
        item['path'] = pathExistingItem
        from threadPlayer import threadPlayer
        threadPlayer(interval, tryPlayFile, item, False, None, fb).start()
        return plugin.set_resolved_url(item)
    if not isSaison:
        #Récupérer les infos du torrent depuis son fichier
        torrentInfos = getTorrentInfo(uri)
        item['properties']['torrentFileName'] = torrentInfos['torrentFileName'].encode()
    plugin.log.debug('\t\t torrentFileName : ' + item['properties'][key].encode())
    isExistTorrentId = fb.isTaskExistByName(item['properties'][key].encode())

    if isExistTorrentId == "":
        res = fb.addTask(uri)
        plugin.log.debug('\t\t torrent not exist so this new Task was added : ' + repr(res))
        taskId = res['result']['id']
    else:
        plugin.log.debug('\t\t isExistTorrentId : ' + repr(isExistTorrentId))
        taskId = isExistTorrentId

    plugin.log.debug('\t \t Taskid : %s' % str(taskId))
    task = fb.findTaskById(taskId)
    plugin.log.debug(repr(task))
    if isSaison:
        freebox_play_Saison(task, item, int(plugin.get_setting('min_dnl_percent')), getFileId(item, taskId))
    else:
        freebox_play(task, item, int(plugin.get_setting('min_dnl_percent')),isExistTorrentId)
    #freebox_play(435, MIN_DOWNLOAD_PERCENT)

def getTorrentInfo(uri):
    urlServer = "%s/torrent/Get" % SCRAPER_SERVER_URL
    res = url_get_param_string(urlServer, params = json.dumps(uri), isParamsDict=False, method='POST')
    plugin.log.debug('getTorrentInfo  : %s' % repr(res))
    if res is None:
        plugin.notify("Pb lors de la récupération des données du torrent : %s" % uri)
        raise Exception("Connection pb")
    return json.loads(res)

def getFileId(item, id):
    plugin.log.debug('TorrentFileName : ' + item['properties']['torrentName'])
    plugin.log.debug(str(id))
    plugin.log.debug(item)
    xbmc.sleep(3000)
    listFilesOfTask = fb.listFilesOfTask(id)
    plugin.log.debug(repr(listFilesOfTask))
    for file in listFilesOfTask:
        plugin.log.debug('FileName : ' + file['name'])
        if file['name'] != item['properties']['torrentFileName']:
            fb.updateFileTask(id, file['id'], {"io_priority":"no_dl"})
        else :
            plugin.log.debug('_______________Matcheeeeeeeeeeed File Name in Saison One File : %s %s %s' % (json.dumps(file, ensure_ascii=False), str(id), str(file['id'])))
            idFile = file['id']
            fb.updateFileTask(id, idFile, {"priority":"high"})
        fb.updateTask(id, {"io_priority": "high","queue_pos":0,"status":"downloading"})
    return idFile

def freebox_play_Saison(task, item, minDowloadPercent, idFile):
    from xbmctorrent.utils import terminating, SafeDialogProgress
    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        dialog.create(plugin.name)
        dialog.update(percent=0, line1="playing %s" % item['label'], line2="", line3="")
        while 1 == 1:
            state = fb.listFilesOfTask(task['id'])
            plugin.log.debug('IdFiiiiiiiiiiiiiiiiiile : %s' % idFile)
            file = list(f for f in state if f["id"] == idFile)[0]
            plugin.log.debug('The Biggest file : %s' % str(file))
            if dialog.iscanceled():
                import xbmcgui
                if not xbmcgui.Dialog().yesno("Keeping Files", "Do you want keep downloaded files?"):
                    fb.deleteTask(task['id'])
                else:
                    return
            fb.updateTask(task['id'], {"io_priority": "high","queue_pos":0, "status": "downloading"})
            
            if file['size'] <= 0:
                continue
            percent = int((float(file['rx']) / float(file['size'])) * 100)
            plugin.log.debug("____________________________ %s : " % repr(file))
            filePath = toValidXbmcPath(task['download_dir'], file['filepath'])

            plugin.log.debug('File Path ------------- ' + filePath)
            dialog.update(percent = percent, line1 = "%s Downloading %s" % (str(percent), item['label']), line2 = file['status'], line3=filePath)
            if percent > minDowloadPercent :
                from threadPlayer import threadPlayer
                item['path'] = filePath
                threadPlayer(interval, tryPlayFile, item, isSaison, task['id'], fb.findTaskById).start()
                return plugin.set_resolved_url(item)
            xbmc.sleep(5000)

def freebox_play(task, item, minDowloadPercent, isExistTorrentId):
    from xbmctorrent.utils import terminating, SafeDialogProgress
    if not isExistTorrentId:
        task['id']+=1
    plugin.log.debug('tasssssssssssssssssssssssssssssk  : %s' % repr(task))

    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        fb.updateTask(task['id'], {"io_priority": "high","queue_pos":0, "status": "downloading"})

        dialog.create(plugin.name)
        dialog.update(percent=0, line1="playing %s" % item['label'], line2="", line3="")
        while 1 == 1:
            if dialog.iscanceled():
                import xbmcgui
                if not xbmcgui.Dialog().yesno("Keeping Files", "Do you want keep downloaded files?"):
                    fb.deleteTask(task['id'])
                else:
                    fb.updateTask(task['id'], {"io_priority": "low","queue_pos":0, "status": "downloading"})
                    return
            task = fb.findTaskById(task['id'])
            plugin.log.debug("____________________________ %s : " % repr(task))

            if task['size'] <= 0:
                continue
            listFiles = fb.listFilesOfTask(task['id'])
            biggestFile = max(listFiles, key=lambda x:x['size'])

            plugin.log.debug('the biggest File : %s' % repr(biggestFile))
            percent = int((float(task['rx_bytes']) / float(task['size'])) * 100)
            filePath = toValidXbmcPath(task['download_dir'], biggestFile['filepath'])

            plugin.log.debug('File Path ------------- ' + filePath)
            dialog.update(percent = percent, line1 = "%s Downloading %s" % (str(percent), item['label']), line2 = task['status'], line3=filePath)

            if percent > minDowloadPercent :
                from threadPlayer import threadPlayer
                item['path'] = filePath
                threadPlayer(interval, tryPlayFile, item, False, task['id'], fb).start()
                return plugin.set_resolved_url(item)
            else:
                task = fb.findTaskById(task['id'])
                    
            xbmc.sleep(5000)

def tryPlayFile(item, isSaison):
    plugin.log.debug("_________tryPlayFile %s" % str(item))
    from library import library_add_new_item
    library_add_new_item(item,  isSaison=isSaison)

def compelteInfoItem(path):
        return  {
                 "path":path,
                 "thumbnail":xbmc.getInfoLabel('ListItem.Thumb'),
                 "label": xbmc.getInfoLabel('ListItem.Label'),
                 "label2": xbmc.getInfoLabel('ListItem.Label2'),
                 "icon": xbmc.getInfoLabel('ListItem.Icon'),
                 "info": {
                     "title": xbmc.getInfoLabel('ListItem.Title'),
                     "genre": xbmc.getInfoLabel('ListItem.Genre'),
                     "plot": xbmc.getInfoLabel('ListItem.Plot'),
                     "plot_outline": xbmc.getInfoLabel('ListItem.PlotOutline'),
                     "rating": xbmc.getInfoLabel('ListItem.RatingAndVotes'),
                     "year": xbmc.getInfoLabel('ListItem.Year'),
                     "tvshowtitle": xbmc.getInfoLabel('ListItem.TvShowTitle'),
                 },
                 "properties": {
                     "fanart_image": xbmc.getInfoLabel('ListItem.Property(Fanart_Image)'),
                     "tvSerieId": xbmc.getInfoLabel('ListItem.Property(tvSerieId)'),
                     "saisonCount": xbmc.getInfoLabel('ListItem.Property(saisonCount)'),
                     "label2": xbmc.getInfoLabel('ListItem.Property(label2)'),
                     "saisonNumber": xbmc.getInfoLabel('ListItem.Property(saisonNumber)'),
                     "tvShowName": xbmc.getInfoLabel('ListItem.Property(tvShowName)'),
                     "torrentFileName": xbmc.getInfoLabel('ListItem.Property(torrentFileName)'),
                     "torrentName" : xbmc.getInfoLabel('ListItem.Property(torrentName)')
                 }
        }

def toValidXbmcPath(download_dir, filePath):
    plugin.log.debug('encoded filepath %s' % filePath)
    plugin.log.debug('decoded filepath %s' % base64.decodestring(filePath))
    tab = base64.decodestring(filePath).split('/')
    plugin.log.debug(tab[len(tab) - 1])
    return xbmc.translatePath(FREEBOX_SMB_PREFIXE + (base64.b64decode(download_dir) + tab[len(tab) - 1]))

@plugin.route("/freebox/testCustomPlayer")
def freebox_testCustomPlayer():
    from xbmctorrent.overlayWindow import OverlayWindow
    #wdpath = os.path.join(os.path.dirname(__file__), "controls")
    #plugin.log.info('wdpath : %s' % wdpath)
    item = {'info': {'rating': 50.9694252, 'code': 'tt1951265', 'aired': '02.03.2015', 'date': '02.03.2015', 'year': 2014, 'size': 0, 'plot': 'Les derniers Hunger Games ont \xe9t\xe9 un fiasco total. Katniss Everdeen a cr\xe9\xe9 la r\xe9bellion et a embras\xe9 le district 12 ! Pour \xe9chapper au pr\xe9sident Snow , Katniss et sa famille se cachent dans le district 13. La vie est encore courante l\xe0-bas... La r\xe9volte commencera.', 'votes': '7,2', 'overlay': 0, 'tagline': '', 'writer': None, 'status': 'Released', 'plotoutline': 'Les derniers Hunger Games ont \xe9t\xe9 un fiasco total. Katniss Everdeen a cr\xe9\xe9 la r\xe9bellion et a embras\xe9 le district 12 ! Pour \xe9chapper au pr\xe9sident Snow , Katniss et sa famille se cachent dans le district 13. La vie est encore courante l\xe0-bas... La r\xe9volte commencera.', 'season': 0, 'director': None, 'credits': None, 'studio': 'Color Force Lionsgate', 'genre': 'Aventure Science-Fiction Thriller', 'count': 0, 'episode': 0, 'title': 'Hunger Games : La R\xe9volte, 1\xe8re partie', 'originaltitle': 'The Hunger Games: Mockingjay - Part 1', 'mpaa': None, 'top250': 0, 'trailer': ''}, 'properties': {'fanart_image': None, 'tvShowName': None, 'isSaison': '0', 'torrentName': None, 'clients': '5,620', 'label': 'The Hunger Games Mockingjay Part 1 2014 FRENCH 720p BluRay x264-PRiDEHD', 'saisonNumber': '0', 'sources': '1,648', 'torrentFileName': None, 'tvSerieId': None, 'saisonCount': None}, 'label2': 'The Hunger Games: Mockingjay - Part 1', 'is_playable': True, 'label': 'The Hunger Games Mockingjay Part 1 2014 FRENCH 720p BluRay x264-PRiDEHD', 'path': 'http://www.omgtorrent.com/clic_dl.php?id=22797', 'thumbnail': 'https://image.tmdb.org/t/p/w500/gj282Pniaa78ZJfbaixyLXnXEDI.jpg', 'icon': None}
    ov = OverlayWindow("overlayWindow.xml", r'C:\Users\Heni\AppData\Roaming\XBMC\addons\plugin.video.xbmctorrent\resources\site-packages\xbmctorrent', item = item)
    ov.doModal()
    ov.show()
    del ov
    #mediaPath = xbmc.translatePath('smb://FREEBOX/TOSHIBA
    #EXT/vidéos/Films/Not.Safe.For.Work.2014.FRENCH.DVDRip.XVid.AC3-JABAL.avi'.decode('latin-1'))
    ##mediaPath = xbmc.translatePath(r'c:\Wildlife.wmv'.decode('latin-1'))
   
    #item = {'path': mediaPath,"thumbnail":
    #"https://image.tmdb.org/t/p/w500/eXW9QWUSq6rJoSoPsgWQ8c6DanD.jpg" }
    #player.init(item, getInfoOverlay)
def getInfoOverlay():
    task = fb.findTaskById(728)
    plugin.log.debug(repr(task))
    return { 'name':task['name'], 'progress':task['rx_pct'] / 100, 'state' : task['status'], 'download_rate':task['rx_rate'], 'upload_rate':task['tx_rate']}

if __name__ == '__main__':
    try:
        plugin.run()
    except Exception:
        pass