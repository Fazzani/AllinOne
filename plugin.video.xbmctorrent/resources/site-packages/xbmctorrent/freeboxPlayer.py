# -*- coding: latin-1 -*-
from freeboxUtils import *
import xbmc
import json
import sys
import os
from xbmctorrent import plugin
import base64
#from mockxbmc import xbmcgui
MIN_DOWNLOAD_PERCENT = 10

@plugin.route("/freebox/movies")
def freebox_torrents():
    listTorrents = requestFreebox(FREEBOX_API + "/downloads/")[CONST_RESULT]
    for torrent in listTorrents:
       file = requestFreebox("%s/downloads/%s/files" % (FREEBOX_API,torrent["id"]))[CONST_RESULT]
       if ('video' or 'stream') in file[0]['mimetype']:
           path = toValidXbmcPath(torrent['download_dir'],file[0]['filepath'])
           yield{
                "label": torrent["name"],
                "path": path,
                "is_playable": True
            }


#POST /api/v3/downloads/add
@plugin.route("/freebox/downloads/addUrl/<uri>/<isSaison>")
def freebox_addByUrl(uri, isSaison):
    from library import library_isExistingItem
    item = compelteInfoItem(uri)
    plugin.log.info("Is saison uri : " + str(isSaison))
    #play_saison(item, 675)

    #if isSaison:
    #    #idFile = play_saison(item, 675)
    #    #plugin.log.info('Now Playiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiig
    #    file from Saison id : %s : ' % idFile)
    #    return freebox_play(675, item, 20, isSaison, "675-23")

    pathExistingItem = library_isExistingItem(item, isSaison=isSaison)
    
    if len(pathExistingItem) > 0:
        plugin.log.info("Item exist in library. Path : %s" % pathExistingItem)
        return plugin.set_resolved_url(pathExistingItem)
    #plugin.log.debug('Magnet uri : '+ensure_magnet(url))
    res = requestFreeboxWithEncodedForm("%s/downloads/add" % FREEBOX_API, dict(download_url=uri) ,{"Content-Type":"application/x-www-form-urlencoded","Accept": "text/plain"})
    plugin.log.info('AddByUrl : ' + repr(res))
    if isSaison:
        idFile = play_saison(item, res['result']['id'] + 1)
    return freebox_play(res['result']['id'] + 1, item, MIN_DOWNLOAD_PERCENT, isSaison=isSaison, idFile=idFile)
    #return freebox_play(435, MIN_DOWNLOAD_PERCENT)
def play_saison(item,id):
    plugin.log.debug('torrentFileName : ' + item['properties']['torrentFileName'])
    plugin.log.debug(str(id))
    plugin.log.debug(item)
    xbmc.sleep(3000)
    res = requestFreebox("%s/downloads/%s/files" % (FREEBOX_API,str(id)),headers={"Content-Type":"application/json","charset":"utf-8"})
    state = json.loads(json.dumps(res))
    plugin.log.debug(str(state))
    plugin.log.debug(str(state[CONST_RESULT]))
    for file in state[CONST_RESULT]:
        plugin.log.debug('FileName : ' + file['name'])
        if file['name'] != item['properties']['torrentFileName']:
            updateItemFile(id,file['id'], {"io_priority":"no_dl"})
        else :
            plugin.log.debug('_______________Matcheeeeeeeeeeed File Name in Saison One File : ' + json.dumps(file, ensure_ascii=False))
            updateItemFile(id, file['id'], {"priority":"high"})
            idFile = file['id']
        updateItem(id, {"io_priority": "high","queue_pos":0,"status":"downloading"})
    return idFile

def freebox_play(id, item, minDowloadPercent=5, isSaison=False, idFile=""):
    from xbmctorrent.utils import terminating, SafeDialogProgress

    with closing(SafeDialogProgress(delay_close=0)) as dialog:
        dialog.create(plugin.name)
        dialog.update(percent=0, line1="playing %s" % item['label'], line2="", line3="")
        while 1 == 1:
            res = requestFreebox("%s/downloads/%s/files" % (FREEBOX_API,str(id)),headers={"Content-Type":"application/json","charset":"utf-8"})
            state = json.loads(json.dumps(res))
            plugin.log.info('freebox_play ______________ State : %s id : %s' % (repr(state), str(id)))
            if not state["success"] and state["error_code"] == "task_not_found":
               plugin.log.debug('Deleting the item_____________')
               deleteItem(id - 1)
               properties = item.setdefault("properties", {})
               if properties.get("label2"):
                    from library import library_add_new_item
                    #chercher le torrent existant
                    plugin.log.debug('The item exist. Searching it by the folowing name : %s' % properties.get("label2"))
                    item['path'] = FindItemByName(properties.get("label2"))
                    plugin.log.debug("_______________Path resolved for existing item  : " + item['path'])
                    library_add_new_item(item, isSaison=isSaison)
                    plugin.set_resolved_url(item)
                    return
               plugin.notify('File exist but not resolved')
            plugin.log.debug(str(state[CONST_RESULT]))
            if isSaison:
                plugin.log.debug('IdFiiiiiiiiiiiiiiiiiile : %s' % idFile)
                #file = filter(state[CONST_RESULT], lambda f:
                #f["id"]==idFile)[0]
                file = list(f for f in state[CONST_RESULT] if f["id"] == idFile)[0]
            else:
                file = max(state[CONST_RESULT], lambda f: f["size"])[0]
            plugin.log.debug('The Biggest file : %s' % str(file))
            if not state['success']:
                return
            if dialog.iscanceled():
                import xbmcgui
                if not xbmcgui.Dialog().yesno("Keeping Files", "Do you want keep downloaded files?"):
                    deleteItem(id)
                else:
                    return
            updateItem(id, {"io_priority": "high","queue_pos":0, "status": "downloading"})
            if file['size'] <= 0:
                continue
            percent = int((float(file['rx']) / float(file['size'])) * 100)
            filePath = getFilePath(file['filepath'], file['task_id'])

            plugin.log.debug('File Path ------------- ' + filePath)
            dialog.update(percent=percent, line1="%s Downloading %s" % (str(percent),item['label']), line2=file['status'], line3=filePath)
            if percent > minDowloadPercent :
                from threadPlayer import threadPlayer
                item['path'] = filePath
                thread = threadPlayer(10000, tryPlayFile, item, isSaison=isSaison)
                thread.start()
                break
            xbmc.sleep(5000)

def tryPlayFile(item, isSaison):
    plugin.log.debug("_________tryPlayFile %s" % str(item))
    from library import library_add_new_item
    library_add_new_item(item,  isSaison=isSaison)
    #plugin.set_resolved_url(item)

#POST /api/v3/downloads/add (multipart/form-data)
@plugin.route("/freebox/downloads/addfile/<file>")
def freebox_addByFile(file):
    res = requestFreeboxWithEncodedForm("%s/downloads/add" % FREEBOX_API,"download_url:" + file,{"Content-Type":"multipart/form-data;charset=UTF-8"})
    plugin.log.debug('AddByUrl : ' + repr(res))
    return res

def authorize():
    
    params = {"app_id": APP_ID,
              "app_name": 'freeboxtorrent',
              "app_version": plugin.addon.getAddonInfo('version'),
              "device_name": DEVICE_NAME }
    auth = json.loads(url_get(FREEBOX_API + "/login/authorize/", params = params, method='POST'))
    plugin.log.debug('auth ____________' + repr(auth))
    if auth['success']:
        plugin.log.debug('auth success : ' + auth[CONST_RESULT]['app_token'])
        authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
        authStorage.update({'app_token': auth[CONST_RESULT]['app_token']})
        authStorage.update({'track_id': auth[CONST_RESULT]['track_id']})
        authStorage.sync()

        while 1 == 1:
           if not openSession():
                break
           print('authorize________________ Waiting to open session')
           xbmc.sleep(2000)
    else:
        plugin.log.debug('auth failed')

def openSession():
    authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
    if 'track_id' not in authStorage:
        authorize()
    plugin.log.info('openSession________________track_id : ' + str(authStorage['track_id']))
    res = json.loads(url_get(FREEBOX_API + "/login/authorize/%s" % str(authStorage['track_id'])))
    plugin.log.info('openSession ________________' + repr(res))
    if res['result']['status'] == 'granted' or res['result']['status'] == 'timeout':
       plugin.log.info('open Session_______________' + res['result']['status'])
       authStorage['challenge'] = res[CONST_RESULT]['challenge']
       authStorage['password'] = getPassword(authStorage['app_token'], authStorage['challenge'])
       authStorage.update({'session': getSession(APP_ID, authStorage['password'])})
       authStorage.sync()
       return True
    return False

def getSession(app_id,password):
    #POST /api/v3/login/session/
    res = json.loads(url_get(FREEBOX_API + "/login/session/",params={"app_id":app_id,"password":password}, method = "POST"))
    if res["result"]:
        return res["result"]
    raise Exception('Getting token session failed')

def getPassword(app_token,challenge):
    from hashlib import sha1
    import hmac
    return hmac.new(app_token.replace('\\','').encode(), challenge.replace('\\',''), sha1).hexdigest()

def requestFreeboxWithEncodedForm(path, params, headers={}):
    authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
    plugin.log.debug('authStorage : -----------' + repr(authStorage))
    if 'session' not in authStorage:
        if openSession():
            return requestFreeboxWithEncodedForm(path,params,headers)
        else:
            plugin.notify('Failed to open session')
    plugin.log.debug('requestFreeboxWithEncodedForm _______________ session_token ' + str(authStorage.get('session')['session_token']))
    HEADERS["X-Fbx-App-Auth"] = str(authStorage.get('session')['session_token'])
    for key,value in headers.items(): 
        HEADERS[key] = value
    res = url_get_param_string(path, params, HEADERS)
    plugin.log.debug(repr(res))
    if res is None:
       if openSession():
            return requestFreeboxWithEncodedForm(path,params,headers)
       else:
            plugin.notify('Failed to open session')
    return json.loads(res)

def requestFreebox(path, params={}, method="GET", headers={}):
    authStorage = plugin.get_storage(name='authStorage', file_format='json', TTL=None)
    plugin.log.info('authStorage : -----------' + repr(authStorage))
    plugin.log.info('authStorage.keys() : -----------' + repr(authStorage.keys()))
    plugin.log.info('uri : ----------- : ' + path)
    if 'session' not in authStorage.keys():
        if openSession():
            return requestFreebox(path,params,method,headers)
        else:
            plugin.notify('Failed to open session')

    plugin.log.info('session_token : ----------- ' + str(authStorage.get('session')['session_token']))
    HEADERS["X-Fbx-App-Auth"] = str(authStorage.get('session')['session_token'])
    for key,value in headers.items(): 
        HEADERS[key] = value
    res = url_get(path, params, HEADERS, method)
    plugin.log.info('Request res : ' + repr(res))
    if res is None:
       if openSession():
            requestFreebox(path, params, method, headers)
       else:
            plugin.notify('Failed to open session')
    return json.loads(res)

def getFilePath(filePath, fileId):
    listTorrents = requestFreebox(FREEBOX_API + "/downloads/")[CONST_RESULT]
    for torrent in listTorrents:
        plugin.log.debug('torrent : ' + str(torrent['id']))
        if int(torrent['id']) == int(fileId):
            return toValidXbmcPath(torrent['download_dir'],filePath)

def toValidXbmcPath(download_dir, filePath):
    subfilePath = base64.b64decode(filePath).split('//')[1]
    plugin.log.debug(subfilePath)
    path = xbmc.translatePath(FREEBOX_SMB_PREFIXE + (base64.b64decode(download_dir) + subfilePath))
    plugin.log.debug(path)
    return path

def compelteInfoItem(path):
        return  {
                 "path":path,
                 "thumbnail":xbmc.getInfoLabel('ListItem.Thumb'),
                 "label": xbmc.getInfoLabel('ListItem.Label'),
                 "label2": xbmc.getInfoLabel('ListItem.Label2'),
                 "icon": xbmc.getInfoLabel('ListItem.Icon'),
                 "info": {
                     "title": xbmc.getInfoLabel('ListItem.Title'),
                     "genre": xbmc.getInfoLabel('ListItem.Genre'),
                     "plot": xbmc.getInfoLabel('ListItem.Plot'),
                     "plot_outline": xbmc.getInfoLabel('ListItem.PlotOutline'),
                     "rating": xbmc.getInfoLabel('ListItem.RatingAndVotes'),
                     "year": xbmc.getInfoLabel('ListItem.Year'),
                     "tvshowtitle": xbmc.getInfoLabel('ListItem.TvShowTitle'),
                 },
                 "properties": {
                     "fanart_image": xbmc.getInfoLabel('ListItem.Property(Fanart_Image)'),
                     "tvSerieId": xbmc.getInfoLabel('ListItem.Property(tvSerieId)'),
                     "saisonCount": xbmc.getInfoLabel('ListItem.Property(saisonCount)'),
                     "label2": xbmc.getInfoLabel('ListItem.Property(label2)'),
                     "saisonNumber": xbmc.getInfoLabel('ListItem.Property(saisonNumber)'),
                     "tvShowName": xbmc.getInfoLabel('ListItem.Property(tvShowName)'),
                     "torrentFileName": xbmc.getInfoLabel('ListItem.Property(torrentFileName)')
                 }
        }

#DELETE /api/v3/downloads/{id}
#DELETE /api/v3/downloads/{id}/erase
def deleteItem(id, erase=True):
    plugin.log.debug('Deleting item %s' % str(id))
    uri = "%s/downloads/%s" % (FREEBOX_API,str(id))
    if erase:
        uri+="/erase"
    res = requestFreebox(uri,headers={"Content-Type":"application/json","charset":"utf-8"},method="DELETE")
    state = json.loads(json.dumps(res))
    return state["success"]

'''
#PUT /api/v3/downloads/{id}
{
   "io_priority": "high",
   "status": "stopped"
}
'''
def updateItem(id, data):
    uri = "%s/downloads/%s" % (FREEBOX_API,str(id))
    res = requestFreebox(uri,data,"PUT",{"Content-Type":"application/json","charset":"utf-8"})
    plugin.log.info('Updating item %s' % str(id))
def updateItemFile(idTask,idFile, data, isJsonContent=True):
    uri = "%s/downloads/%s/files/%s" % (FREEBOX_API,str(idTask),str(idFile))
    if isJsonContent:
        res = requestFreebox(uri,data,"PUT",{"Content-Type":"application/json","charset":"utf-8"})
    else:
        res = requestFreebox(uri,data,"PUT")
    plugin.log.info(repr(res))
    plugin.log.info('Updating task %s id file %s' % (str(idTask),str(idFile)))

def FindItemByName(torrentName):
    plugin.log.debug('__________in FindItemByName searching : ' + torrentName)
    listTorrents = requestFreebox(FREEBOX_API + "/downloads/")[CONST_RESULT]
    for torrent in listTorrents:
       if torrentName.replace(' ','.') in torrent['name'] :
           file = requestFreebox("%s/downloads/%s/files" % (FREEBOX_API,torrent["id"]))[CONST_RESULT]
           return toValidXbmcPath(torrent['download_dir'],file[0]['filepath'])

if __name__ == '__main__':
    try:
        plugin.run()
    except Exception:
        
        raise